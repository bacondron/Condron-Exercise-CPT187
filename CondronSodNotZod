package condron.edu.cpt187.participation6;
import java.util.Scanner;
import java.io.IOException;
import java.io.FileInputStream;
public class Inventory {
	//constants
	private final String[] DISCOUNT_NAMES = {"Member", "Senior", "None"};
	private final double[] DISCOUNT_RATES = {0.25, 0.15, 0.0};
	private final String[] PRIZE_NAMES = {"Coupon", "T-Shirt", "Fertilizer"};
	private final int MAX_ITEMS = 5;
	private final int NOT_FOUND = -1;
	private final int RESET_VALUE = 0;
	//variables
	private int[] itemIDs;
	private String[] itemNames;
	private double[] itemPrices;
	private int itemSearchIndex;
	private int recordCount = 0;
	private int[] inStockCounter;
	private int[] qty;
	//constructor
	public Inventory() {
		
	}
	//set decrease in stock
	public void setDecreaseInStock(int borrowedHowMany) {
	
	}
	//set load items
	public void setLoadItems(String borrowedFileName) {
		recordCount = RESET_VALUE;
		try 
		{
			Scanner infile = new Scanner(new FileInputStream(borrowedFileName));
			while (infile.hasNext() == true && recordCount < MAX_ITEMS) {
				itemPrices[recordCount] = infile.nextDouble();
				itemNames[recordCount] = infile.next();
				itemIDs[recordCount] = infile.nextInt();
				inStockCounter[recordCount] = infile.nextInt();
				recordCount ++;
			}
			infile.close();
		}
		catch(IOException e) {
			recordCount = NOT_FOUND;
		}
		
	}
	//setLoad items loaded
	public void setLoadItems(String borrowedMasterFileName, int borrowedSize) {
		recordCount = RESET_VALUE;
		try {
			Scanner infile = new Scanner(new FileInputStream(borrowedMasterFileName));
			while (infile.hasNext() == true && recordCount < MAX_ITEMS) {
				itemPrices[recordCount] = infile.nextDouble();
				itemNames[recordCount] = infile.next();
				itemIDs[recordCount] = infile.nextInt();
				qty[recordCount] = infile.nextInt();
			}
			infile.close();
		}
		catch(IOException e) {
			recordCount = NOT_FOUND;
		}
	}
	//search index
	public void setSearchIndex(int borrowedTarget) {
		itemSearchIndex = borrowedTarget;
	}
	//get in stock counts
	public void setInStockCounts(){
		inStockCounter = new int[MAX_ITEMS];
		inStockCounter[0] = 5;
		inStockCounter[1] = 3;
		inStockCounter[2] = 4;
	}
	//get item names
	public String getItemNames() {
		return itemNames[itemSearchIndex];
	}
	//get item prices
	public double getItemPrices() {
		return itemPrices[itemSearchIndex];
	}
	//get discount names
	public String getDiscountNames() {
		return DISCOUNT_NAMES[itemSearchIndex];
	}
	//get discount rates
	public double getDiscountRates() {
		return DISCOUNT_RATES[itemSearchIndex];
	}
	//get prize names
	public String getPrizeNames() {
		return PRIZE_NAMES[itemSearchIndex];
	}
	//get search index
	public int getSearchIndex() {
		return itemSearchIndex;
	}
	//get record count
	public int getRecordCount() {
		return recordCount;
	}
	//get search results
	public int getSearchResults(int borrowedBorrowedTarget) {
		return searchResults[borrowedBorrowedTarget];
	}
}
package condron.edu.cpt187.participation6;
import java.io.PrintWriter;
import java.io.FileWriter;
import java.io.IOException; 
public class OrderWriter {
   //variables
	private String masterFileName = " ";
	private int recordCount = 0;
  //constructor
	public OrderWriter(String borrowedFileName) {
	}
	//set write order
	public void setWriteOrder(int borrowedItemID, String borrowedItemName, double borrowedItemPrice, int borrowedQuantity, double borrowedOrderCost) {
		try {
			PrintWriter filePW = new PrintWriter(new FileWriter(masterFileName, true));
			filePW.printf("%d\t%s\t%f\t%d\t%f\r", borrowedItemID, borrowedItemName, borrowedItemPrice, borrowedItemPrice, borrowedQuantity, borrowedOrderCost);
			}
			catch(IOException e) {
				System.out.println("Error");
			}
	}
	//get record count
	public int getRecordCount() {
		recordCount++;
		return recordCount;
	}
}
package condron.edu.cpt187.participation6;
import java.util.Random;
public class SodOrder {
	//constants
	private final double TAX_RATE = .075;
	//VARIABLES
	private int[] itemCounts;
	private int[] discountCounts;
	private int[] prizeCounts;
	private char discountType = ' ';
	private String itemName = "";
	private double itemPrice = 0.0;
	private String discountName = "";
	private double discountRate = 0.0;
	private double discountAmt = 0.0;
	private double discountPrice = 0.0;
	private double subTotal = 0.0;
	private double taxRate = 0.0;
	private double taxAmt = 0.0;
	private double totalCost = 0.0;
	private int howMany = 0;
	private int lastItemSelectedIndex = 0;
	private Random RandomNumberGenerator = new Random();
	private String prizeName = "";
	//constructor
	public void SodOder(double borrowedTaxRate) {
		
	}
	//set count arrays
	public void setCountArrays(int borrowedRecordCount) {
		itemCounts = new int[borrowedRecordCount];
		discountCounts = new int[borrowedRecordCount];
		prizeCounts = new int[borrowedRecordCount];
	}
	//set item selection
	public void setItemSelection(int borrowedSearchIndex) {
		lastItemSelectedIndex = borrowedSearchIndex;
	}
	//set item name
	public void setItemName(String[] borrowedItemNames) {
		
	}
	//set itemPrice
	public void setItemPrice(double[] borrowedItemPrice) {
		
	}
	//set how many
	public void setHowMany(int borrowedHowMany) {
		
	}
	//set discount type
	public void setDiscountType(char borrowedMenuSelection, String borrowedDiscountNames, double borrowedDiscountRate) {
		
	}
	//set discount name
	public void setDiscountName(String borrowedDiscountNames) {
		
	}
	//set prize name
	public void setPrizeName(String[] borrowedPrizeNames) {
		prizeName = borrowedPrizeNames[getRandomNumber()];
	}
	//set reduce stock
	public void setReduceStock(Inventory borrowedInventoryObject) {
		borrowedInventoryObject.setDecreaseInStock();
	}
	//get in stock count
	public int getInStockCount(int[] borrowedInStockCounts) {
		inStockCount = borrowedInStockCounts[lastItemSelectionIndex];
	}
	//get itemName
	public String getItemName() {
		return itemName;
	}
	//get item price
	public double getItemPrice() {
		return itemPrice;
	}
	//get how many
	public int getHowMany() {
		return howMany;
	}
	//get discount name
	public String getDiscountName() {
		return discountName;
	}
	//get discount rate 
	public double getDiscountRate() {
		return discountRate;
	}
	//get discount amt
	public double getDiscountAmt() {
		
		return discountAmt = (howMany * itemPrice) * discountRate;
	}
	//get discount price
	public double getDiscountPrice() {
		return discountPrice = (howMany * itemPrice) - discountAmt;
	}
	//get subtotal
	public double getSubTotal() {
		return subTotal = (howMany * itemPrice) - discountPrice;
	}
	//get tax rate
	public double getTaxRate() {
		return taxRate = TAX_RATE;
	}
	//get tax amt
	public double getTaxAmt() {
		return taxAmt = subTotal * taxRate;
	}
	//get total cost
	public double getTotalCost() {
		return totalCost = subTotal + taxAmt;
	}
	//get item counts
	public int[] getItemCounts() {
		return itemCounts;
	}
	//get discount counts
	public int[] getDiscountCounts() {
		return discountCounts;
	}
	//get prize counts
	public int[] getPrizeCounts() {
		return prizeCounts;
	}
	//get prize name
	public String getPrizeName() {
		return prizeName;
	}
	//getRandom number
	public int getRandomNumber() {
		//seeded to prize_names.length
		return randomNumberGenerator.nextInt(PRIZE_NAMES.length);
	}
 }
 //main class
 package condron.edu.cpt187.participation6;
import java.util.Scanner;
public class mainClass {
	final static String[] MAIN_MENU_OPTIONS = {"Load Inventory", "Create Order", "Quit"};
public static void main(String args) {
	Scanner input = new Scanner(System.in);
	String userName = "";
	int howMany = 0;
	char menuSelection = ' ';
	String fileName = "";
	SodOrder mySodOrder = new SodOrder();
	Inventory currentInventory = new Inventory();
	OrderWriter sodOrders = new OrderWriter(fileName);
	displayWelcomeBanner();
	userName = getUserName(input);
	menuSelection = validateMenuSelection(input);
	//MAIN METHOD
	while (menuSelection != 'Q') {
		if (menuSelection == 'A') {
			currentInventory.setLoadItems(getFileName(input));
			if (currentInventory.getRecordCount() < 0) {
				displayNotOpen();
			}
			else {
				displayRecordReport(currentInventory.getRecordCount());
			}
			menuSelection = validateMenuSelection(input);
			currentInventory.setSearchIndex(validateSearchValue(input));	
			}
		if (currentInventory.getSearchIndex() < 0) {
			displayNotFound();
			menuSelection = validateMenuSelection(input);
		}
		else {
			mySodOrder.setItemSelection(currentInventory.getSearchIndex());
			mySodOrder.setItemName(currentInventory.getItemNames());
			mySodOrder.setItemPrice(currentInventory.getItemPrices());
			mySodOrder.setHowMany(validateHowMany(input));
		}
		if (mySodOrder.getInStockCount() < mySodOrder.getHowMany()) {
			displayOutOfStock();
			menuSelection = validateMenuSelection(input);
		}
		else {
			mySodOrder.setDiscountType(validateDiscountMenu(input, currentInventory.getDiscountNames(), currentInventory.getDiscountRates()));
			mySodOrder.setDiscountName(currentInventory.getDiscountNames());
			mySodOrder.setReduceStock(mySodOrder.getHowMany());
			mySodOrder.setPrizeName(null);
			sodOrders.setWriteOrder(mySodOrder.getItemName(), currentInventory.getItemPrices(), currentInventory.getQty());
		}
		if (mySodOrder.getDiscountRate() > 0.0) {
			displayItemReciept(mySodOrder.getItemName(), mySodOrder.getHowMany(), mySodOrder.getDiscountName(), mySodOrder.getDiscountRate(), mySodOrder.getDiscountAmt(), mySodOrder.getDiscountPrice(), mySodOrder.getSubTotal(), mySodOrder.getTaxRate(), mySodOrder.getTaxAmt(), mySodOrder.getTotalCost(), mySodOrder.getPrizeName());
		}
		else {
			displayItemReciept(mySodOrder.getItemName(), mySodOrder.getItemPrice(), mySodOrder.getHowMany(), mySodOrder.getSubTotal(), mySodOrder.getTaxRate(), mySodOrder.getTaxAmt(), mySodOrder.getTotalCost(), mySodOrder.getPrizeName());
		}
		menuSelection = validateMenuSelection(input);
	}//end of while
	if (mySodOrder.getTotalCost() > 0.0) {
		displayFinalReport(mySodOrder.getDiscountCounts(), mySodOrder.getItemCounts(), mySodOrder.getPrizeCounts(), mySodOrder.getInStockCount(), sodOrders.getRecordCount());
	}
	displayFarewellMessage();
}//end of main method
	//methods
	//welcome banner
	public static void displayWelcomeBanner() {
		System.out.println("Welcome to the Sod Order Program");
	}
	//farewell
	public static void displayFarewellMessage() {
		System.out.println("Thank you for using SodNotZod Program! Have a great day!");
	}
	//user name input
	public static String getUserName(Scanner borrowedInput) {
		String localUserName = "";
		System.out.printf("%1s", "What is your username?");
		localUserName = borrowedInput.next();
		return localUserName;
	}
	//main menu selection
	public static char validateMenuSelection(Scanner borrowedInput){
		char localMenuSelection = ' ';
		System.out.printf("%5s", "Main Menu");
		System.out.printf("%1s%10s", "[A] ", MAIN_MENU_OPTIONS[0]);
        System.out.printf("%1s%10s", "[B] ", MAIN_MENU_OPTIONS[1]);
        System.out.printf("%1s%10s", "[Q] ", MAIN_MENU_OPTIONS[2]);
        localMenuSelection = borrowedInput.next().toUpperCase().charAt(0);
        if (localMenuSelection != 'A' && localMenuSelection != 'B' && localMenuSelection != 'Q') {
        	System.out.println("Invalid entry.");
        	System.out.printf("%5s", "Main Menu");
    		System.out.printf("%1s%10s", "[A] ", MAIN_MENU_OPTIONS[0]);
            System.out.printf("%1s%10s", "[B] ", MAIN_MENU_OPTIONS[1]);
            System.out.printf("%1s%10s", "[Q] ", MAIN_MENU_OPTIONS[2]);
            localMenuSelection = borrowedInput.next().toUpperCase().charAt(0);
        }
        return localMenuSelection;
	}
	//get file name input
	public static String getFileName(Scanner borrowedInput) {
		String localFileName = "";
		System.out.printf("%1s", "Please input file name: ");
		localFileName = borrowedInput.next();
		return localFileName;
	}
	//displayNotOpen
	public static void displayNotOpen() {
		System.out.println("File not open");
	}
	//display record report
	public static void displayRecordReport(int borrowedRecordCount) {
		System.out.printf("%1s%10d", "Record Count: ", borrowedRecordCount);
	}
	//validate search value 
	public static int validateSearchValue(Scanner borrowedInput) {
		int localSearchValue = 0;
		System.out.println("Please input ID number: ");
		localSearchValue = borrowedInput.nextInt();
		return localSearchValue;
	}
	//display not found
	public static void displayNotFound() {
		System.out.println("Not found.");
	}
	//validate how many
	public static int validateHowMany(Scanner borrowedInput) {
		int localHowMany = 0;
		System.out.println("Please enter how many of the product you would like to buy: ");
		localHowMany = borrowedInput.nextInt();
		return localHowMany;
	}
	//display out of stock
	public static void displayOutOfStock() {
		System.out.println("Out of stock.");
	}
	//discount menu
	public static char validateDiscountMenu(Scanner borrowedInput, String[] borrowedDiscountNames, double[] borrowedDiscountRate) {
		char localMenuSelection = ' ';
		System.out.printf("%1s%10s", "[A] ", borrowedDiscountNames[0]);
		System.out.printf("%1s%10s", "[B] ", borrowedDiscountNames[1]);
		System.out.printf("%1s%10s", "[B] ", borrowedDiscountNames[2]);
		localMenuSelection = borrowedInput.next().toUpperCase().charAt(0);
		if (localMenuSelection != 'A' && localMenuSelection != 'B' && localMenuSelection != 'C') {
			System.out.println("Invalid entry.");
			System.out.printf("%1s%10s", "[A] ", borrowedDiscountNames[0]);
			System.out.printf("%1s%10s", "[B] ", borrowedDiscountNames[1]);
			System.out.printf("%1s%10s", "[B] ", borrowedDiscountNames[2]);
			localMenuSelection = borrowedInput.next().toUpperCase().charAt(0);
		}
		return localMenuSelection;
		}
	//display item reciept 1
	public static void displayItemReciept(String borrowedItemName, double borrowedItemPrice, String borrowedDiscountName, double borrowedDiscountRate1, double borrowedDiscountAmt, double borrowedDiscountPrice, double borrowedSubTotal, double borrowedTaxRate, double borrowedTaxAmt, double borrowedTotalCost, String borrowedPrizeName) {
		System.out.printf("%5s", "Item Reciept");
		System.out.printf("%1s%10s", "Item Name: ", borrowedItemName);
		System.out.printf("%1s%10f", "Item Price: $", borrowedItemPrice);
		System.out.printf("%1s%10d", "How Many: ", borrowedHowMany);
		System.out.printf("%1s%10s", "Discount Name: ", borrowedDiscountName);
		System.out.printf("%1s%10f", "Discount Rate: " );
		System.out.printf("%1s%10f", "Discount Price: $", borrowedDiscountPrice);
		System.out.printf("%1s%10f", "SubTotal: $", borrowedSubTotal);
		System.out.printf("%1s%10f", "Tax Rate: ", borrowedTaxRate);
		System.out.printf("%1s%10f", "Tax Amount: $", borrowedTaxAmt);
		System.out.printf("%1s%10f", "Total Cost: $", borrowedTotalCost);
		System.out.printf("%1s%10s", "Prize Name; ", borrowedPrizeName);
	}
	//display item reciept 2 
	public static void displayItemReciept(String borrowedItemName, double borrowedItemPrice, int borrowedHowMany, double borrowedSubTotal, double borrowedTaxRate, double borrowedTaxAmt, double borrowedTotalCost, String borrowedPrizeName) {
		System.out.printf("%5s", "Item Reciept");
		System.out.printf("%1s%10s", "Item Name: ", borrowedItemName);
		System.out.printf("%1s%10f", "Item Price: $", borrowedItemPrice);
		System.out.printf("%1s%10d", "How Many: ", borrowedHowMany);
		System.out.printf("%1s%10f", "SubTotal: $", borrowedSubTotal);
		System.out.printf("%1s%10f", "Tax Rate: ", borrowedTaxRate);
		System.out.printf("%1s%10f", "Tax Amount: $", borrowedTaxAmt);
		System.out.printf("%1s%10f", "Total Cost: $", borrowedTotalCost);
		System.out.printf("%1s%10s", "Prize Name; ", borrowedPrizeName);
	}
	//final report
	public static void displayFinalReport(int[] is, int[] is2, int[] is3, int borrowedInStockCounts, int borrowedRecordCounts) {
		System.out.printf("%5s", "Final Report");
		System.out.printf("%1s%10d", "Discount Counts: ", is);
		System.out.printf("%1s%10d", "Item Counts: ", is2);
		System.out.printf("%1s%10d", "Prize Counts: ", is3);
		System.out.printf("%1s%10d", "In Stock Counts: ", borrowedInStockCounts);
		System.out.printf("%1s%10d", "Record Counts: ", borrowedRecordCounts);
	}
	
	
	
	
	
	

	}



